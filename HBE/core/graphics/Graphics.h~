#pragma once

#include "Core.h"
#include <vector>
#include <string>
#include "glm/glm.hpp"
#include "Renderer.h"


namespace HBE {
	class Renderer;

	class RenderTarget;

	class GraphicPipeline;

	class Mesh;

	struct Transform;

	class Window;

	class GraphicPipelineInstance;

	template<typename... Args>
	class Event;

	class RaytracingPipelineInstance;

	class RootAccelerationStructure;

	class RenderTarget;

	class Texture;

	class HB_API Graphics {
		static Renderer *renderer;
		static Window *window;
	public:
		static const Mesh *DEFAULT_QUAD;
		static const Mesh *DEFAULT_CUBE;

		static void init();

		static Window *getWindow();

		static void draw(DrawCmdInfo& DrawCmdInfo);

		static void drawInstanced(const Mesh &mesh, GraphicPipelineInstance &material);

		static void raytrace(const RootAccelerationStructure &root_acceleration_structure,
							 RaytracingPipelineInstance &pipeline,
							 const mat4 &projection_matrix,
							 const mat4 &view_matrix,
							 vec2u resolution);
		/// <summary>
		/// Render the drawn geometry to the render_target
		static void render(const RenderTarget *render_target, const mat4 &projection_matrix, const mat4 &view_matrix);

		static RenderTarget *getDefaultRenderTarget();

		static void terminate();

        static void waitCurrentFrame();
		static void beginFrame();

		static void present(const Texture *texture);

		static void endFrame();

		static Renderer *getRenderer();

		static uint32_t getCurrentFrame();

		static uint32_t getFrameCount();
	};
}